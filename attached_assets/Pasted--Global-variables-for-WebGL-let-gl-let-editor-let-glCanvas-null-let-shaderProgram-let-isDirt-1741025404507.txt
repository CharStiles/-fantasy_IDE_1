// Global variables for WebGL
let gl;
let editor;
let glCanvas = null;
let shaderProgram;
let isDirty = false;
let isExpanded = false;

// Initialize WebGL and editor
window.onload = () => {
  webgl_startup();
  init();
}

function init() {
  var editorContainer = document.getElementById("editor");
  editor = CodeMirror(editorContainer, {
    value: _fragmentShader, // Your initial shader code
    lineNumbers: true,
    mode: "x-shader/x-vertex",
    gutters: ["CodeMirror-lint-markers"],
    lint: true,
    lineWrapping: !isInPresentationMode()
  });

  editor.on('change', onEdit);
  onEdit();
  
  addCodeMirrorEditorModifier();
  setupEscapeHandler();
  
  // Initially hide editor
  const editorElement = document.querySelector('.CodeMirror');
  if (editorElement) {
    editorElement.style.display = 'none';
  }
}

// Editor visibility controls
function setupEscapeHandler() {
  document.addEventListener('mousedown', (e) => {
    isExpanded = true;
    updateEditorVisibility();
  });
  
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isExpanded) {
      isExpanded = false;
      updateEditorVisibility();
      e.preventDefault();
    }
  });
}

function updateEditorVisibility() {
  const editorElement = document.querySelector('.CodeMirror');
  if (editorElement) {
    editorElement.style.display = isExpanded ? 'block' : 'none';
  }
}

// Shader updating
function onEdit() {
  isExpanded = true;
  updateEditorVisibility();
  const fragmentCode = editor.getValue();
  updateShader(fragmentCode);
}

function updateShader(fragmentCode) {
  if (checkFragmentShader(fragmentCode) != []) {
    console.log("error in shader");
    return;
  }
  console.log("NO error in shader");
  _fragmentShader = fragmentCode;
  isDirty = true;
}

// WebGL setup and rendering
function webgl_startup() {
  glCanvas = document.getElementById("glcanvas");
  glCanvas.width = window.innerWidth;
  glCanvas.height = window.innerHeight;
  
  glCanvas.style.position = 'fixed';
  glCanvas.style.top = '0';
  glCanvas.style.left = '0';
  glCanvas.style.width = '100%';
  glCanvas.style.height = '100%';
  glCanvas.style.zIndex = '-1';

  gl = glCanvas.getContext("webgl");
  shaderProgram = buildShaderProgram();
  
  // Set up WebGL buffers and attributes
  setupWebGL();
  
  // Start animation loop
  animateScene();
}

function setupWebGL() {
  // Create vertex buffer for fullscreen quad
  const vertices = new Float32Array([
    -1, -1,
     1, -1,
    -1,  1,
     1,  1
  ]);
  
  const vertexBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
}

function animateScene() {
  if (isDirty) {
    shaderProgram = buildShaderProgram();
    isDirty = false;
  }
  
  gl.viewport(0, 0, glCanvas.width, glCanvas.height);
  gl.clear(gl.COLOR_BUFFER_BIT);
  
  // Set uniforms and draw
  const timeLocation = gl.getUniformLocation(shaderProgram, "u_time");
  gl.uniform1f(timeLocation, performance.now() / 1000.0);
  
  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  
  requestAnimationFrame(animateScene);
}

// Shader compilation and error checking
function checkFragmentShader(shaderCode) {
  if (!gl) return;
  let shader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(shader, shaderCode);
  gl.compileShader(shader);
  let infoLog = gl.getShaderInfoLog(shader);
  let result = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  let ret = [];
  
  if (!result) {
    console.log(infoLog);
    var errors = infoLog.split(/\r|\n/);
    for (let error of errors) {
      var splitResult = error.split(":")
      ret.push({
        message: splitResult[3] + splitResult[4],
        character: splitResult[1],
        line: splitResult[2]
      });
    }
  }
  
  return ret;
}

function buildShaderProgram() {
  const vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, DEFAULT_VERTEX_SHADER);
  gl.compileShader(vertexShader);

  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, _fragmentShader);
  gl.compileShader(fragmentShader);

  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);

  return program;
}

// CodeMirror GLSL Linting Integration
(function(mod) {
  mod(CodeMirror);
})(function(CodeMirror) {
  "use strict";

  function validator(text, options) {
    var result = [];
    var errors = checkFragmentShader(text, true);
    if (errors) parseErrors(errors, result);
    return result;
  }

  CodeMirror.registerHelper("lint", "x-shader/x-vertex", validator);

  function parseErrors(errors, output) {
    for (var i = 0; i < errors.length; i++) {
      var error = errors[i];
      if (error) {
        if (Number(error.line) <= 0) continue;

        var start = error.character - 1, end = start + 1;
        var hint = {
          message: error.message,
          severity: "error",
          from: CodeMirror.Pos(Number(error.line) - 1, start),
          to: CodeMirror.Pos(Number(error.line) - 1, end)
        };
        output.push(hint);
      }
    }
  }
});

// Add required CSS
const styles = `
.CodeMirror {
  position: fixed;
  top: 0;
  right: 0;
  width: 50%;
  height: 100%;
  z-index: 1000;
  background-color: rgba(0, 0, 0, 0.8);
  color: #fff;
}

.CodeMirror-present {
  font-size: 24px;
  line-height: 1.5;
}

.CodeMirror-editor {
  font-size: 14px;
  line-height: 1.2;
}

.cm-s-default .cm-keyword {color: #ff79c6;}
.cm-s-default .cm-number {color: #bd93f9;}
.cm-s-default .cm-def {color: #50fa7b;}
.cm-s-default .cm-variable {color: #f8f8f2;}
.cm-s-default .cm-variable-2 {color: #ff79c6;}
.cm-s-default .cm-type {color: #8be9fd;}
`;

const styleSheet = document.createElement("style");
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);

// Default vertex shader
const DEFAULT_VERTEX_SHADER = `
attribute vec2 position;
void main() {
  gl_Position = vec4(position, 0.0, 1.0);
}`;